use std.env;

let parseArguments = () {
	let args = env.args().collect<Vector<_>>();
	if args.length() > 1 {
		println("The first argument is {}", args[1]);
		match args[1].parse<I32>() {
			Ok(n)  => println("{} is a valid number!", n),
			Err(_) => println("The first argument is not a number.")
		};
		let i = args[1].parse<I32>().unwrapOr(0);
		println("Parsed first argument is {}", i);
	}
}

let main = () {
	parseArguments();
}

let
var
ref

Int32, Int64, Int16, Int8,
UInt32, UInt64, UInt16, UInt8,
ISize, USize,
Bool,
String

type PointType = enum {
	Flat,
	High,
	Geometry,
	View
}

type Point = struct {
	type ValueType = Int32;
	x : Int32;
	y : Int32;
	z : Int32;
}

impl Point {
	let length(ref<self>) -> I32 {
		std.math.sqrt(x*x + y*y + z*z)
	}
}

let add = (n) {	(p) { n + p } }

let add = (n : I32) -> I32 {
	(p : I32) -> I32 { n + p }
}

let faculty = (n : I32) {
	var acc = 1;
	for i in [2..n] {
		acc *= i;
	}
	acc
}

let main = () {
	let a = 5;  // Int32
	var b = 10; // mutable Int32
	ref c = a;  // reference to Int32

}